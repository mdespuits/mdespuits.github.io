<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Bridges]]></title>
  <link href="http://mattdbridges.github.io/atom.xml" rel="self"/>
  <link href="http://mattdbridges.github.io/"/>
  <updated>2014-04-10T09:57:17-05:00</updated>
  <id>http://mattdbridges.github.io/</id>
  <author>
    <name><![CDATA[Matt Bridges]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Welcome to Lotus: A minimal and testable Ruby web framework]]></title>
    <link href="http://mattdbridges.github.io/blog/2014/04/08/welcome-to-lotus/"/>
    <updated>2014-04-08T16:29:47-05:00</updated>
    <id>http://mattdbridges.github.io/blog/2014/04/08/welcome-to-lotus</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve been developing in Rails for any period of time, you know there are certain parts of Rails that are just difficult or frustrating to work with when you are trying to test (cough, cough, controllers, cough). I have gone back and forth between not testing them, testing them, testing them via acceptance tests with capybara, etc. It&rsquo;s hard to do well.</p>

<p>This is one of the reasons the new framework <a href="http://lotusrb.org/">Lotus</a> caught my eye a few months back. It&rsquo;s another entry in the minimal web frameworks for Ruby, but it has a few unique features that set it apart in my mind.</p>

<h1>So, what is Lotus?</h1>

<p>As stated on the website&hellip;</p>

<blockquote><p>Lotus is an Open Source software for MVC web development. It&rsquo;s simple, fast, and lightweight.</p></blockquote>

<p>I couldn&rsquo;t put it better. If you go to the Github <a href="https://github.com/lotus/">Lotus organization</a>, you will notice that several of the pieces that we normally associate with Rails are in separate gems. Controllers, routes, views, and models are all pulled apart into their own gems.</p>

<p>It gets better. Each gem is independent of the others. I&rsquo;m not sure if very many people know how to use <code>actionview</code> or <code>actionpack</code> outside of Rails. The entire point is to make it easy to plug in only pieces that we want or need for our web app. Need a router? Awesome. Need views? Nope, we don&rsquo;t need them.</p>

<p>Testing is also fast. Very fast.</p>

<blockquote><p>&hellip;mind-blowingly fast. &ndash; Jeremy Clarkson</p></blockquote>

<h1>What&rsquo;s the big deal?</h1>

<p>Ok, it&rsquo;s another framework. It&rsquo;s another paradigm to learn and wrap your head around. What makes it a big deal is how minimal and how uninvasive it is to test.</p>

<p>Not only that, the source itself is easy to read and understand. It&rsquo;s extremely well-documented and has 100% unit test coverage. In short, I would find it <em>infinitely</em> easier to jump in and contribute to a Lotus framework than Rails because of how simple to follow the source really is.</p>

<p>Let&rsquo;s take a controller example:</p>

<figure class='code'><figcaption><span>controllers/home_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HomeController</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Index</span>
</span><span class='line'>    <span class="kp">include</span> <span class="ss">Lotus</span><span class="p">:</span><span class="ss">:Action</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expose</span> <span class="ss">:planet</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@planet</span> <span class="o">=</span> <span class="s1">&#39;World&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Create</span>
</span><span class='line'>    <span class="kp">include</span> <span class="ss">Lotus</span><span class="p">:</span><span class="ss">:Action</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expose</span> <span class="ss">:planet</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty dead simple, right? No views, not routing, just a controller with a mixin <code>Lotus::Action</code>. Doesn&rsquo;t even do much except return or redirect. Here are my specs that over all that I care about.</p>

<figure class='code'><figcaption><span>spec/controllers/home_controller_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HomeController</span>
</span><span class='line'>  <span class="n">describe</span> <span class="no">Index</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;calls an action&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">action</span> <span class="o">=</span> <span class="no">Index</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="n">action</span><span class="o">.</span><span class="n">call</span><span class="p">({})</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">200</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">({</span><span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;application/octet-stream&quot;</span><span class="p">})</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">action</span><span class="o">.</span><span class="n">exposures</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">({</span><span class="ss">planet</span><span class="p">:</span> <span class="s2">&quot;World&quot;</span><span class="p">})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="no">Create</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;redirects back home&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="no">Create</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">call</span><span class="p">({})</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">302</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="s2">&quot;Location&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to make sure I&rsquo;m not pulling any punches, here is the source for my <code>spec_helper.rb</code>.</p>

<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;lotus/controller&#39;</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../controllers/home_controller&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! All I need is the gem and my file and I can run my specs&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rspec spec/controllers/home_controller_spec.rb
</span><span class='line'>..
</span><span class='line'>
</span><span class='line'>Finished in 0.00353 seconds
</span><span class='line'>2 examples, 0 failures
</span><span class='line'>
</span><span class='line'>Randomized with seed 48373
</span></code></pre></td></tr></table></div></figure>


<p>Success!</p>

<p>And if you aren&rsquo;t sure how to test something, copy a spec from Lotus itself. They are that simple and that straightforward. You can test each part of your Lotus application without being too coupled to another part.</p>

<h1>So you&rsquo;ve intrigued me. What&rsquo;s it good for?</h1>

<p>Well, given how small it is, it would be ideal for a small website, a basic blog, a marketing front-page, or maybe an API endpoint. Given how new it is, I wouldn&rsquo;t go trying to convince your boss to switch to it from a large Rails app, especially since it is so new. But given enough time it may work well</p>

<h1>Is it ready?</h1>

<p>In short, yes and no.</p>

<p><a href="https://github.com/jodosha">Luca Guidi</a> has been releasing one piece of the Lotus framework each month. At the time of this writing (April 8, 2014), <code>Lotus::Model</code> has not been released, but who needs models when in the meantime you have POROs!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiencing the Asset Pipeline]]></title>
    <link href="http://mattdbridges.github.io/blog/2014/02/03/experiencing-the-asset-pipeline/"/>
    <updated>2014-02-03T22:00:07-06:00</updated>
    <id>http://mattdbridges.github.io/blog/2014/02/03/experiencing-the-asset-pipeline</id>
    <content type="html"><![CDATA[<p>Here at PeopleAdmin, we are constantly trying to improve our app. Well, isn&rsquo;t everybody. There are many things that we have done to improve our workflow, our speed, our developer happiness, etc. There is one thing that was still biting us from the old days of Rails, though.</p>

<blockquote><p>We hadn&rsquo;t upgraded to the Asset Pipeline.</p></blockquote>

<p>There were several reasons for this, but the simplest one is that we didn&rsquo;t do a lot of front-end development. We concentrated most of our efforts on the bad-end side of Rails and left the front alone. Sure, we touched it every so often to fix a bug or add a new feature that required fiddling with javascript and stylesheets, but in general we let it alone.</p>

<p>Those days are now gone. More and more our app needed front-end care and organizing. As part of a new project we are working on, a lot of new javascript and styling was introduced and reminded us how languid our scripts and styles were. We needed to change. So now was the perfect time to revisit the dreaded Pipeline.</p>

<p>There were several concerns about switching to the asset pipeline:</p>

<ol>
<li>How can we ensure we are not breaking things?</li>
<li>How much manual work is necessary?</li>
</ol>


<p>Our app is, well, enourmous. We have a lot of javascript and CSS strewn throughout the app from the views to the assets to the layouts. If you know anything about Rails asset organization, you know this is a big no-no. &ldquo;You put page-specific styles in your view? Are you asking for a migrane in six months?&rdquo;.</p>

<p>Here is how I approached the problem of reducing the number of breaks</p>

<h2>Automate all the things</h2>

<p><img class="right" src="http://mattdbridges.github.io/images/automate-all-the-things.jpg" width="350"></p>

<p>Automation was key to our migration to the asset pipeline. Just constructing the script was enough work, but I couldn&rsquo;t have imagined doing it by hand and being confident that I caught all of the exceptions and oddities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Path to BCrypt]]></title>
    <link href="http://mattdbridges.github.io/blog/2014/01/30/the-path-to-bcrypt/"/>
    <updated>2014-01-30T00:00:00-06:00</updated>
    <id>http://mattdbridges.github.io/blog/2014/01/30/the-path-to-bcrypt</id>
    <content type="html"><![CDATA[<p>Ok, just for a minute, imagine that you have just inherited a large codebase. In trying to understand how it all works together, you decide to look at the <code>users</code> table. What greets your eyes?</p>

<p>If you are a software engineer or have been for any amount of time, you care about security. So when you find that <code>User</code> passwords are stored in a poorly encrypted format, your heart sinks. It sinks even more when you realize how many people use your app, so changing it isn&rsquo;t an simple drop it in and it works.</p>

<p>Or is it?</p>

<h2>The Problem</h2>

<p>Migration millions of user&rsquo;s passwords to BCrypt is <em>not</em> a fast migration. In this case, it would take weeks on an average box. <em>(I&rsquo;m not going to go over BCrypt and what it is here, so please <a href="http://codahale.com/how-to-safely-store-a-password/">read up on it</a> if you are not familiar with it.)</em> To accomplish this, we will need to support three forms of passwords:</p>

<ol>
<li>The original <code>SHA256</code> password</li>
<li>The future <code>BCrypt</code> password</li>
<li>The <code>BCrypt</code>ed <code>SHA256</code> password</li>
</ol>


<p>Here is an example of exactly what I mean. (You will need to <code>gem install bcrypt-ruby</code>)</p>

<figure class='code'><figcaption><span>pry</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>1<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; require <span class="s1">&#39;digest/sha2&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'><span class="o">[</span>2<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; require <span class="s1">&#39;bcrypt&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'><span class="o">[</span>3<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; <span class="nv">password</span> <span class="o">=</span> <span class="s2">&quot;password123&quot;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;password123&quot;</span>
</span><span class='line'><span class="o">[</span>4<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; Digest::SHA256.hexdigest <span class="nv">password</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f&quot;</span>
</span><span class='line'><span class="o">[</span>5<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; BCrypt::Password.create <span class="nv">password</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;$2a$10$fQqOH7vj.kfS5bo2p7hHQOZNvPwv.MxrNWG5ay0AByZWVpY9ktxsO&quot;</span>
</span><span class='line'><span class="o">[</span>6<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; BCrypt::Password.create<span class="o">(</span>Digest::SHA256.hexdigest<span class="o">(</span>password<span class="o">))</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;$2a$10$bB2qzrislazplghA.1nSPuHgmWTCLELC.66RQPRg2Qjai8WHR3eNu&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Challenges to Overcome</li>
<li>Extracting to it&rsquo;s own class</li>
</ul>

]]></content>
  </entry>
  
</feed>
