<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Bridges]]></title>
  <link href="http://matt-bridges.com/atom.xml" rel="self"/>
  <link href="http://matt-bridges.com/"/>
  <updated>2014-02-03T22:21:48-06:00</updated>
  <id>http://matt-bridges.com/</id>
  <author>
    <name><![CDATA[Matt Bridges]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Experiencing the Asset Pipeline]]></title>
    <link href="http://matt-bridges.com/blog/2014/02/03/experiencing-the-asset-pipeline/"/>
    <updated>2014-02-03T22:00:07-06:00</updated>
    <id>http://matt-bridges.com/blog/2014/02/03/experiencing-the-asset-pipeline</id>
    <content type="html"><![CDATA[<p>Here at PeopleAdmin, we are constantly trying to improve our app. Well, isn&rsquo;t everybody. There are many things that we have done to improve our workflow, our speed, our developer happiness, etc. There is one thing that was still biting us from the old days of Rails, though.</p>

<blockquote><p>We hadn&rsquo;t upgraded to the Asset Pipeline.</p></blockquote>

<p>There were several reasons for this, but the simplest one is that we didn&rsquo;t do a lot of front-end development. We concentrated most of our efforts on the bad-end side of Rails and left the front alone. Sure, we touched it every so often to fix a bug or add a new feature that required fiddling with javascript and stylesheets, but in general we let it alone.</p>

<p>Those days are now gone. More and more our app needed front-end care and organizing. As part of a new project we are working on, a lot of new javascript and styling was introduced and reminded us how languid our scripts and styles were. We needed to change. So now was the perfect time to revisit the dreaded Pipeline.</p>

<p>There were several concerns about switching to the asset pipeline:</p>

<ol>
<li>How can we ensure we are not breaking things?</li>
<li>How much manual work is necessary?</li>
</ol>


<p>Our app is, well, enourmous. We have a lot of javascript and CSS strewn throughout the app from the views to the assets to the layouts. If you know anything about Rails asset organization, you know this is a big no-no. &ldquo;You put page-specific styles in your view? Are you asking for a migrane in six months?&rdquo;.</p>

<p>Here is how I approached the problem of reducing the number of breaks</p>

<h2>Automate all the things</h2>

<p><img class="right" src="http://matt-bridges.com/images/automate-all-the-things.jpg" width="350"></p>

<p>Automation was key to our migration to the asset pipeline. Just constructing the script was enough work, but I couldn&rsquo;t have imagined doing it by hand and being confident that I caught all of the exceptions and oddities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Path to BCrypt]]></title>
    <link href="http://matt-bridges.com/blog/2014/01/30/the-path-to-bcrypt/"/>
    <updated>2014-01-30T00:00:00-06:00</updated>
    <id>http://matt-bridges.com/blog/2014/01/30/the-path-to-bcrypt</id>
    <content type="html"><![CDATA[<p>Ok, just for a minute, imagine that you have just inherited a large codebase. In trying to understand how it all works together, you decide to look at the <code>users</code> table. What greets your eyes?</p>

<p>If you are a software engineer or have been for any amount of time, you care about security. So when you find that <code>User</code> passwords are stored in a poorly encrypted format, your heart sinks. It sinks even more when you realize how many people use your app, so changing it isn&rsquo;t an simple drop it in and it works.</p>

<p>Or is it?</p>

<h2>The Problem</h2>

<p>Migration millions of user&rsquo;s passwords to BCrypt is <em>not</em> a fast migration. In this case, it would take weeks on an average box. <em>(I&rsquo;m not going to go over BCrypt and what it is here, so please <a href="http://codahale.com/how-to-safely-store-a-password/">read up on it</a> if you are not familiar with it.)</em> To accomplish this, we will need to support three forms of passwords:</p>

<ol>
<li>The original <code>SHA256</code> password</li>
<li>The future <code>BCrypt</code> password</li>
<li>The <code>BCrypt</code>ed <code>SHA256</code> password</li>
</ol>


<p>Here is an example of exactly what I mean. (You will need to <code>gem install bcrypt-ruby</code>)</p>

<figure class='code'><figcaption><span>pry</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>1<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; require <span class="s1">&#39;digest/sha2&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'><span class="o">[</span>2<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; require <span class="s1">&#39;bcrypt&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'><span class="o">[</span>3<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; <span class="nv">password</span> <span class="o">=</span> <span class="s2">&quot;password123&quot;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;password123&quot;</span>
</span><span class='line'><span class="o">[</span>4<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; Digest::SHA256.hexdigest <span class="nv">password</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f&quot;</span>
</span><span class='line'><span class="o">[</span>5<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; BCrypt::Password.create <span class="nv">password</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;$2a$10$fQqOH7vj.kfS5bo2p7hHQOZNvPwv.MxrNWG5ay0AByZWVpY9ktxsO&quot;</span>
</span><span class='line'><span class="o">[</span>6<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; BCrypt::Password.create<span class="o">(</span>Digest::SHA256.hexdigest<span class="o">(</span>password<span class="o">))</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;$2a$10$bB2qzrislazplghA.1nSPuHgmWTCLELC.66RQPRg2Qjai8WHR3eNu&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Challenges to Overcome</li>
<li>Extracting to it&rsquo;s own class</li>
</ul>

]]></content>
  </entry>
  
</feed>
